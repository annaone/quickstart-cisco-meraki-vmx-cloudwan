AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This stack is creating creates a step function workflow for meraki cloudWAN.(qs-1srtkbc3l)

# Metadata:
#   AWS::ServerlessRepo::Application:
#      Name: Amazon-Meraki-cloudWAN integration
#      Description: This integration demonstrates an sets up multiple workflows using AWS Step Functions, AWS Lambda, Amazon Eventbridge and Meraki Console Amazon EventBridge Integration.
#      Author: AWS Quick Start
#      LicenseUrl: LICENSE
#      ReadmeUrl: README.md
#      Labels: ['amazon', 'eventbridge', 'integration', 'solution', 'aws', 'lambda', 'step_functions', 'meraki', 'networkmanager']
#      HomePageUrl: https://aws.amazon.com/quickstart/quickstart-cisco-meraki-sdwan-vmx
#      SemanticVersion: 0.1.3
#      SourceCodeUrl: https://github.com/aws-quickstart/quickstart-cisco-meraki-sdwan-vmx
  # AWS::CloudFormation::Interface:
  #   ParameterGroups:
  #   - Label:
  #       default: Amazon EventBridge Integration Solution
  #     Parameters:
  #     - EventSourceName
  #   - Label:
  #       default: Meraki Configuration
  #     Parameters:
  #     - MerakiToken
  #   ParameterLabels:
  #     EventSourceName:
  #       default: Event Source Name
  #     MerakiAccessToken:
  #       default: Access Token

# Parameters:
#   GlobalNetworkName:
#     Description: Name of Global Network
#     Type: String

#Type: 'AWS::Serverless::Function'
#    Properties:
#      FunctionName: !Sub "${AWS::StackName}-MacroNFWHelperFunction"
#      Handler: firewallmacro.handle
#      Runtime: python3.7
#      CodeUri:
#        Bucket: !Sub
#                - "${S3Bucket}"
#                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
#        Key: !Sub "${QSS3KeyPrefix}apps/sumo-aws-apps/sumologic-app-utils/sumo_app_utils.zip"
#      MemorySize: 128
#      Timeout: 900
#      Role:
#        Fn::GetAtt:
#          - MacroNFWHelperRole
#          - Arn 
Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.8
    Timeout: 900
Parameters:
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-cisco-meraki-sd-wan-vmx/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  GlobalNetworkName:
    Description: AWS CloudWAN Global Network Name
    Default: "meraki_gn"
    Type: String
  MerakiEventBusName:
    Description: Name of CustomEventBus for EventBridge
    Default: "MerakiEventBus"
    Type: String
  BaseRegion:
    Description: Is the stack being deployed for base region or additional regions
    Type: String
  BaseRegionName:
    Type: String
    Description: Base region for the CloudWAN resource
  VPCID:
    Description: 'ID of the VPC (e.g., vpc-0343606e)'
    Type: 'AWS::EC2::VPC::Id'
  AvailabilityZone1SubnetID:
    Description: Subnet ID to be used for the deployment of vMX-1 in Availability Zone 1
    Type: 'AWS::EC2::Subnet::Id'
  AvailabilityZone2SubnetID:
    Description: Subnet ID to be used for the deployment of vMX-2 in Availability Zone 2
    Type: 'AWS::EC2::Subnet::Id'
  AmazonASNRange:
    Description: Autonomous System Number (ASN) for CloudWAN Network. 
    Type: String
  

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  AmazonASNRange: !Equals [!Ref AmazonASNRange, '']

Resources:

# Need to separate these resources into different stacks, here is an example on how to do it.
# Basically, the event bridge bus, and the delete resources need to be in their own stack, with a retain 

  # DeleteStack:
  #   Type: AWS::CloudFormation::Stack
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     TemplateURL:
  #       !Sub
  #         - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/delete.template.yaml
  #         - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
  #           S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  #     Parameters:
  #       MerakiEventBusName:
  #         Ref: MerakiEventBusName      

  # CustomResourceStack:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: DeleteStack
  #   Properties:
  #     TemplateURL:
  #       !Sub
  #         - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/customresource.template.yaml
  #         - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
  #           S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  #     Parameters:
  #       MerakiEventBusName:
  #         Ref: MerakiEventBusName   



  MerakiEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref MerakiEventBusName

  CreateGlobalNetworkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/create_global_network.zip"
      Policies:
      - AWSNetworkManagerFullAccess
  
  DescribeGlobalNetworksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/describe_global_network.zip"
      Policies:
      - AWSNetworkManagerFullAccess
  
  CreateCoreNetworkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/create_core_network.zip"
      Policies:
      - AWSNetworkManagerFullAccess
  
  DescribeCoreNetworksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/describe_core_network.zip"
      Policies:
      - AWSNetworkManagerFullAccess
  
  UpdateNetworkPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/update_network_policy.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
  ExecuteCoreNetworkChangeSetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/execute_core_network_change_set.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess

  GetNetworkPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/get_network_policy_status.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AWSAccountManagementReadOnlyAccess
  
  CreateVpcAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/create_vpc_attachment.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
  
  GetVpcAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/get_vpc_attachment.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AWSAccountManagementReadOnlyAccess

  CreateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: State machine to create meraki cloudwan global network
        StartAt: Create global network
        States:
          Create global network:
            Type: Task
            Resource: !GetAtt CreateGlobalNetworkFunction.Arn
            ResultPath: $.GlobalNetworkId
            Next: Wait 10 seconds for global network
          Wait 10 seconds for global network:
            Type: Wait
            Seconds: 10
            Next: Get global network status
          Get global network status:
            Type: Task
            Resource: !GetAtt DescribeGlobalNetworksFunction.Arn
            ResultPath: $.GlobalNetworkStatus
            Next: Global network completed?
          Global network completed?:
            Type: Choice
            Choices:
            - Variable: "$.GlobalNetworkStatus"
              StringEquals: AVAILABLE
              Next: Create core network
            - Variable: "$.GlobalNetworkStatus"
              StringEquals: FAILED
              Next: Failed
            Default: Wait 10 seconds for global network
          Create core network:
            Type: Task
            Resource: !GetAtt CreateCoreNetworkFunction.Arn
            ResultPath: $.CoreNetworkId
            Next: Wait 10 seconds for core network
          Wait 10 seconds for core network:
            Type: Wait
            Seconds: 10
            Next: Get core network status
          Get core network status:
            Type: Task
            Resource: !GetAtt DescribeCoreNetworksFunction.Arn
            ResultPath: $.CoreNetworkStatus
            Next: Core network completed?
          Core network completed?:
            Type: Choice
            Choices:
            - Variable: "$.CoreNetworkStatus"
              StringEquals: AVAILABLE
              Next: Update network policy
            - Variable: "$.CoreNetworkStatus"
              StringEquals: FAILED
              Next: Failed
            Default: Wait 10 seconds for core network
          Update network policy:
            Type: Task
            Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyVersionId
            Next: Wait 10 seconds for network policy
          Wait 10 seconds for network policy:
            Type: Wait
            Seconds: 10
            Next: Get policy status
          Get policy status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy ready to execute?
          Network policy ready to execute?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: READY_TO_EXECUTE
              Next: Execute core network change set
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 10 seconds for network policy
          Execute core network change set:
            Type: Task
            Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
            ResultPath: $.ChangeSetResponse
            Next: Wait 60 seconds for execute core network changeset
          Wait 60 seconds for execute core network changeset:
            Type: Wait
            Seconds: 60
            Next: Get network policy changeset status
          Get network policy changeset status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy change set executed?
          Network policy change set executed?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: EXECUTION_SUCCEEDED
              Next: Create Vpc Attachment
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 60 seconds for execute core network changeset
          Done:
            Type: Pass
            End: true
          Failed:
            Type: Pass
            End: true
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateGlobalNetworkFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DescribeGlobalNetworksFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateCoreNetworkFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DescribeCoreNetworksFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref UpdateNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref ExecuteCoreNetworkChangeSetFunction
      
      Events:
        CreateNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - New meraki global network requested
              account:
                - !Ref AWS::AccountId
                
  CreateNetworkStateMachineAdditionalRegion:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
          Comment: State machine to update meraki global cloudwan network with additional region
          StartAt: Update network policy
          States:
            Update network policy:
              Type: Task
              Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
              ResultPath: $.NetworkPolicyVersionId
              Next: Wait 10 seconds for network policy
            Wait 10 seconds for network policy:
              Type: Wait
              Seconds: 10
              Next: Get policy status
            Get policy status:
              Type: Task
              Resource: !GetAtt GetNetworkPolicyFunction.Arn
              ResultPath: $.NetworkPolicyChangeSetState
              Next: Network policy ready to execute?
            Network policy ready to execute?:
              Type: Choice
              Choices:
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: READY_TO_EXECUTE
                Next: Execute core network change set
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: FAILED_GENERATION
                Next: Failed
              Default: Wait 10 seconds for network policy
            Execute core network change set:
              Type: Task
              Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
              ResultPath: $.ChangeSetResponse
              Next: Wait 60 seconds for execute core network changeset
            Wait 60 seconds for execute core network changeset:
              Type: Wait
              Seconds: 60
              Next: Get network policy changeset status
            Get network policy changeset status:
              Type: Task
              Resource: !GetAtt GetNetworkPolicyFunction.Arn
              ResultPath: $.NetworkPolicyChangeSetState
              Next: Network policy change set executed?
            Network policy change set executed?:
              Type: Choice
              Choices:
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: EXECUTION_SUCCEEDED
                Next: Create Vpc Attachment
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: FAILED_GENERATION
                Next: Failed
              Default: Wait 60 seconds for execute core network changeset
            Create Vpc Attachment:
              Type: Task
              Resource: !GetAtt CreateVpcAttachmentFunction.Arn
              ResultPath: $.Destinations
              Next: Wait 60 seconds for attachment creation
            Wait 60 seconds for attachment creation:
              Type: Wait
              Seconds: 60
              Next: Get vpc attachment status 
            Get vpc attachment status:
              Type: Task
              Resource: !GetAtt GetVpcAttachmentFunction.Arn
              ResultPath: $.VpcAttachmentState
              Next: Ready to update network policy?
            Ready to update network policy?:
              Type: Choice
              Choices:
              - Variable: "$.VpcAttachmentState"
                StringEquals: AVAILABLE
                Next: Update network policy with attachment
              - Variable: "$.VpcAttachmentState"
                StringEquals: FAILED
                Next: Failed
              Default: Wait 60 seconds for attachment creation
            Update network policy with attachment:
              Type: Task
              Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
              Parameters:
                Destinations.$: "$.Destinations"
                CoreNetworkId.$: "$.CoreNetworkId"
              ResultPath: $.NetworkPolicyVersionId
              Next: Wait 10 seconds for attachment network policy
            Wait 10 seconds for attachment network policy:
              Type: Wait
              Seconds: 10
              Next: Get attachment network policy status
            Get attachment network policy status:
              Type: Task
              Resource: !GetAtt GetNetworkPolicyFunction.Arn
              ResultPath: $.NetworkPolicyChangeSetState
              Next: Attachment Network policy ready?
            Attachment Network policy ready?:
              Type: Choice
              Choices:
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: READY_TO_EXECUTE
                Next: Execute core network changeset with attachment
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: FAILED_GENERATION
                Next: Failed
              Default: Wait 10 seconds for attachment network policy
            Execute core network changeset with attachment:
              Type: Task
              Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
              ResultPath: $.ChangeSetResponse
              Next: Wait 60 seconds for execute core network changeset with attachment
            Wait 60 seconds for execute core network changeset with attachment:
              Type: Wait
              Seconds: 60
              Next: Get attachment network policy changeset status
            Get attachment network policy changeset status:
              Type: Task
              Resource: !GetAtt GetNetworkPolicyFunction.Arn
              ResultPath: $.NetworkPolicyChangeSetState
              Next: Attachment network policy change set ready to execute?
            Attachment network policy change set ready to execute?:
              Type: Choice
              Choices:
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: EXECUTION_SUCCEEDED
                Next: Done
              - Variable: "$.NetworkPolicyChangeSetState"
                StringEquals: FAILED_GENERATION
                Next: Failed
              Default: Wait 60 seconds for execute core network changeset with attachment
            Done:
              Type: Pass
              End: true
            Failed:
              Type: Pass
              End: true
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref UpdateNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref ExecuteCoreNetworkChangeSetFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateVpcAttachmentFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetVpcAttachmentFunction
      
      Events:
        CreateAddtionalRegionNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - New meraki additional region requested
              account:
                - !Ref AWS::AccountId

  UpdateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: State machine to update meraki cloudwan global network
        StartAt: Update network policy
        States:
          Update network policy:
            Type: Task
            Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyVersionId
            Next: Wait 10 seconds for network policy
          Wait 10 seconds for network policy:
            Type: Wait
            Seconds: 10
            Next: Get policy status
          Get policy status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy ready to execute?
          Network policy ready to execute?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: READY_TO_EXECUTE
              Next: Execute core network change set
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 10 seconds for network policy
          Execute core network change set:
            Type: Task
            Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
            ResultPath: $.ChangeSetResponse
            Next: Wait 60 seconds for execute core network changeset
          Wait 60 seconds for execute core network changeset:
            Type: Wait
            Seconds: 60
            Next: Get network policy changeset status
          Get network policy changeset status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy change set executed?
          Network policy change set executed?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: EXECUTION_SUCCEEDED
              Next: Done
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 60 seconds for execute core network changeset
          Done:
            Type: Pass
            End: true
          Failed:
            Type: Pass
            End: true
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref UpdateNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref ExecuteCoreNetworkChangeSetFunction
      Events:
        UpdateNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - update global network requested
              account:
                - !Ref AWS::AccountId
##
##
## Delete State Machine Resources
  
  DSMWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    # DependsOn: 
    Properties:
      Handle: !Ref DSMWaitHandle
      Timeout: 300
      Count: 1
  
  DSMWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  DSMCustomResource:
    Type: Custom::CloudWanLambda
    DependsOn: 
      - CloudWanDeleteStepFunction
    Properties:
      ServiceToken: !GetAtt DSMCustomResourceLambda.Arn
      WaitHandle: !Ref DSMWaitHandle
      EventBusName: !Ref 'MerakiEventBusName'
      BaseRegion: !Ref 'BaseRegion'
      BaseRegionName: !Ref 'BaseRegionName'
      Az1SubnetArn: !Sub
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${AZ1SubnetID}
                - AZ1SubnetID: !Ref 'AvailabilityZone1SubnetID'
      Az2SubnetArn: !Sub
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${AZ2SubnetID}
                - AZ2SubnetID: !Ref 'AvailabilityZone2SubnetID'
      VPCId: !Ref 'VPCID'
      VPCArn: !Sub 
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPC_ID}
                - VPC_ID: !Ref 'VPCID'
      GlobalNetworkName: !Ref 'GlobalNetworkName'
      ASN_Range: !Ref 'AmazonASNRange'
      #add !Ref globalnetworkname

  DSMCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda for DSMCustomResource
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt DSMCustomResourceLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub | 
          import boto3
          import json
          import cfnresponse
          import os
          from botocore.vendored import requests

          sfn = boto3.client('stepfunctions')
          region = os.environ['AWS_REGION']
          aws_client = boto3.client('events', region_name=base_region_name)
          EventBusName = event['ResourceProperties']['EventBusName']
          asn_range = event['ResourceProperties']['ASN_Range']
          vpc_arn = event['ResourceProperties']['VPCArn']
          az1_subnet_arns = event['ResourceProperties']['Az1SubnetArn']
          az2_subnet_arns = event['ResourceProperties']['Az2SubnetArn']
          subnet_arns = [az1_subnet_arn, az2_subnet_arn]


          def handler(event, context):
            print('Received event: %s' % json.dumps(event))
            status = cfnresponse.SUCCESS
            responseData = {}
            try:
              if event['RequestType'] == 'Create':
                if base_region == 'Yes':
                  response = aws_client.put_events(
                    Entries=[
                    {
                        'Source': 'com.aws.merakicloudwanquickstart',
                        'DetailType': 'New Meraki global network requested',
                        'Detail': json.dumps({"network_name": global_network_name, "region": region, "asn-range": [asn_range], "destination_cidr_blocks": ['blackhole'], "VpcArn": vpc_arn, "SubnetArns": [subnet_arns]}),
                        'EventBusName': EventBusName
                    }
                    ]
                  )
                  responseData.append(response)
                  response2 = aws_client.put_events(
                    Entries=[
                    {
                        'Source': 'com.aws.merakicloudwanquickstart',
                        'DetailType': 'New meraki additional region requested',
                        'Detail': json.dumps({"network_name": global_network_name, "region": region, "asn-range": [asn_range], "destination_cidr_blocks": [vpn_routes], "VpcArn": vpc_arn, "SubnetArns": [subnet_arns]}),
                        'EventBusName': EventBusName
                    }
                    ]
                  )
                  responseData.append(response2)
                elif base_region == 'No':
                  response = aws_client.put_events(
                      Entries=[
                      {
                          'Source': 'com.aws.merakicloudwanquickstart',
                          'DetailType': 'New meraki additional region requested',
                          'Detail': json.dumps({"network_name": global_network_name, "region": region, "asn-range": [asn_range], "destination_cidr_blocks": [vpn_routes], "VpcArn": vpc_arn, "SubnetArns": [subnet_arns]}),
                          'EventBusName': EventBusName
                      }
                      ]
                  )
                  responseData.append(response)
                else:
                  logger.error('Unsupported region type')

                  ###eventually, needs to call the create 'step_functions
                  ###for now,just pass in the waithandle token to say nothing needs to be waited on
                  #print(event['ResourceProperties']['WaitHandle'])
                  #requests_data=json.dumps(dict(Status='SUCCESS',Reason='wait timer not needed',UniqueId='12345',Data='Custom Resource Lambda')).encode('utf-8')
                  #response = requests.put(event['ResourceProperties']['WaitHandle'], data=requests_data, headers={'Content-Type':''}) 
                  #print (response)       
                  #print('Nothing to do') 
              elif event['RequestType'] == 'Delete':
                response = ec2.put_events(
                    Entries=[
                    {
                        'Source': 'com.aws.merakicloudwanquickstart',
                        'DetailType': 'Delete Cloud WAN resources requested',
                        'Detail': json.dumps({}),
                        'EventBusName': 'TestEventBus'
                    }
                    ]
                )                     
              else:
                print('Nothing to do')                  
            except Exception as e:
              print(e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, responseData)
  
  DSMCustomResourceLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: "*"
              Resource: "*"


  CloudWanDeleteStepFunction:
    Type: AWS::Serverless::StateMachine
    DependsOn: 
    - CallbackLambda
    - DeleteAttachmentsDSMFunction
    - DeleteCoreDSMFunction
    - DeleteGlobalDSMFunction
    - DescribeNetworkDSMFunction
    - GetAttachmentStatusDSMFunction
    - GetCoreStatusDSMFunction
    - MerakiEventBus
    Properties:
      Definition:
        Comment: A description of my state machine
        StartAt: Describe Network
        States:
          Describe Network:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt DescribeNetworkDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Delete Attachments
            ResultPath: "$.networkDetails"
          Delete Attachments:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt DeleteAttachmentsDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Wait 1 minute
            ResultPath: "$.attachmentsDeleteExecuted"
          Wait 1 minute:
            Type: Wait
            Seconds: 10
            Next: Get Attachment Status
          Get Attachment Status:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt GetAttachmentStatusDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Attachments Deleted?
            ResultPath: "$.attachmentStatus"
          Attachments Deleted?:
            Type: Choice
            Choices:
            - Variable: "$.attachmentStatus.Payload"
              StringEquals: DELETED
              Next: Delete Core Network
            Default: Wait 1 minute
          Delete Core Network:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt DeleteCoreDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Wait 5 Minutes
            ResultPath: "$.coreDeleteExecuted"
          Wait 5 Minutes:
            Type: Wait
            Seconds: 10
            Next: Get Core Network Status
          Get Core Network Status:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt GetCoreStatusDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Core Network Deleted?
            ResultPath: "$.coreStatus"
          Core Network Deleted?:
            Type: Choice
            Choices:
            - Variable: "$.coreStatus.Payload"
              StringEquals: DELETED
              Next: Delete Global Network
            Default: Wait 5 Minutes
          Delete Global Network:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt DeleteGlobalDSMFunction.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            ResultPath: "$.globalDeleteExecuted"
            Next: CallBack Lambda
          CallBack Lambda:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: "$"
              FunctionName: !GetAtt CallbackLambda.Arn
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            End: true
            ResultPath: "$.callback"
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref DescribeNetworkDSMFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DeleteAttachmentsDSMFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetAttachmentStatusDSMFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DeleteCoreDSMFunction          
      - LambdaInvokePolicy:
          FunctionName: !Ref GetCoreStatusDSMFunction  
      - LambdaInvokePolicy:
          FunctionName: !Ref DeleteGlobalDSMFunction 
      - LambdaInvokePolicy:
          FunctionName: !Ref CallbackLambda 
      Events:
        UpdateNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - Delete Cloud WAN resources requested
              # account:
              #   - !Ref AWS::AccountId        



  CallbackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sends callback to CloudFormation to continue after Delete Step FUnction
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          from botocore.vendored import requests

          def handler(event, context):
            print('Received event: %s' % json.dumps(event))
            print(event['ResourceProperties']['WaitHandle'])
            try:
              requests_data=json.dumps(dict(Status='SUCCESS',Reason='Step Function Succeeded',UniqueId='12345',Data=event['ResourceProperties'])).encode('utf-8')
              response = requests.put(event['ResourceProperties']['WaitHandle'], data=requests_data, headers={'Content-Type':''}) 
              print (response)
            except Exception as e:
              print (e)
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt CallbackRole.Arn
      Timeout: 300

  CallbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"



  DeleteAttachmentsDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')
        import boto3
        from botocore.vendored import requests

        client = boto3.client('networkmanager')

        def lambda_handler(event, context):
            #print(event)
            print(event['networkDetails']['Payload'])
            attachments = event['networkDetails']['Payload']['Attachments']
            #delete attachments
            #if deleting state, pass , else fail
            for attachment in attachments:
                #print(attachment)
                response = client.delete_attachment(AttachmentId=attachment)
                print(response)
                if response['Attachment']['State'] == 'DELETING':
                    print('DELETING',attachment)
                else:
                    #to-do: error handling
                    print('ERROR',attachment)
                    return('ERROR')

            return('DELETING')
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DeleteCoreDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler    
      Runtime: python3.8
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')        
        import boto3
        from botocore.vendored import requests

        client = boto3.client('networkmanager')

        def lambda_handler(event, context):
            print(event['networkDetails']['Payload']['CoreNetworkId'])
            coreNetworkId = event['networkDetails']['Payload']['CoreNetworkId']
            response = client.delete_core_network(CoreNetworkId=coreNetworkId)
            print(response)
            if response['CoreNetwork']['State'] == 'DELETING':
                print('DELETING')
                return('DELETING')
            else:
                #to-dp: write error handling
                print('ERROR')
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DeleteGlobalDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler 
      Runtime: python3.8   
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')            
        import boto3
        from botocore.vendored import requests

        client = boto3.client('networkmanager')

        def lambda_handler(event, context):
            globalNetworkId = event['networkDetails']['Payload']['GlobalNetworkId']
            try:
                response = client.delete_global_network(GlobalNetworkId=globalNetworkId)
                print(response)
            
            except Exception as e:
                print(e)
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DescribeNetworkDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler  
      Runtime: python3.8  
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')          
        from botocore.vendored import requests
        import boto3

        client = boto3.client('networkmanager')


        def lambda_handler(event, context):
            print('Event: {}'.format(event))
            network={}
            try:
                #get GlobalNetworkID based upon predefined tag
                response = client.describe_global_networks()
                for gn in response['GlobalNetworks']:
                    for tag in gn['Tags']:
                        if tag['Key'] == 'quickstart-control-DO-NOT-MODIFY' and tag['Value'] == 'Meraki CloudWAN Quick Start':
                            print('Global NetworkID: ' + gn['GlobalNetworkId'])
                            print('tag: '+ tag['Key'], tag['Value'])
                            network['GlobalNetworkId'] = gn['GlobalNetworkId']
                
                
                #get the proper core network associated with the GlobalNetworkID
                response = client.list_core_networks()
                for core in response['CoreNetworks']:
                    #is try/except the proper way to do this?
                    #not all items returned will have a global network, so it will throw an error without try/except
                    try: 
                        if core['GlobalNetworkId'] == network['GlobalNetworkId']:
                            #print(core['CoreNetworkId'])
                            network['CoreNetworkId'] = core['CoreNetworkId']
                    except:
                        #print('global network not found')
                        pass
                
                network['Attachments'] = [] #create list to include multiple attachments
                response = client.list_attachments(CoreNetworkId=network['CoreNetworkId'])
                for attachment in response['Attachments']:
                    #print(attachment)
                    try: 
                        if attachment['SegmentName'] == 'sdwan':
                            #print(attachment['AttachmentId'])
                            network['Attachments'].append(attachment['AttachmentId'])
                    except:
                        #print('SegmentName not found')
                        pass                
                
                
                #add error logic if network not found
                print(network)
                return(network)
                
            except Exception as e:
                print(e)
                #requests_data=json.dumps(dict(Status='FAILURE',Reason='Exception: %s' % e,UniqueId='DeleteStateMachine',Data=event['ResourceProperties'])).encode('utf-8')
                #response = requests.put(event['ResourceProperties']['WaitHandle'], data=requests_data, headers={'Content-Type':''})
                #print (response)    
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess

  GetAttachmentStatusDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')          
        from botocore.vendored import requests
        import boto3

        client = boto3.client('networkmanager')

        def lambda_handler(event, context):
            print(event)
            print(event['networkDetails']['Payload']['CoreNetworkId'])
            coreNetworkId = event['networkDetails']['Payload']['CoreNetworkId']
            response = client.list_attachments(CoreNetworkId=coreNetworkId)
            print(response)
            for attachment in response['Attachments']:
                print(attachment)

            if response['Attachments']:
                print('WAITING')
                return('WAITING')
            else:
                print('DELETED')
                return('DELETED')


      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess

  GetCoreStatusDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      InlineCode: |
        import json
        import sys
        from pip._internal import main
        main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
        sys.path.insert(0,'/tmp/')         
        import boto3
        from botocore.vendored import requests

        client = boto3.client('networkmanager')

        def lambda_handler(event, context):
            coreNetworkId = event['networkDetails']['Payload']['CoreNetworkId']
            response = client.list_core_networks()
            for core in response['CoreNetworks']:
                if core['CoreNetworkId'] == coreNetworkId:
                    print('WAITING')
                    return('WAITING')
            print('DELETED')
            return('DELETED')

      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


##End of Delete State Machine Resources
##
##

Outputs:
  CreateStateMachine:
    Value: !Ref CreateStateMachine
    Description: Create network Step Function Arn
  UpdateStateMachine:
    Value: !Ref UpdateStateMachine
    Description: Update network Step Function Arn
  CreateNetworkStateMachineAdditionalRegion:
    Value: !Ref CreateNetworkStateMachineAdditionalRegion
    Description: Create network additional region Step Function Arn
  MerakiEventBusArn:
    Description: The ARN of the central event bus
    Value: !GetAtt MerakiEventBus.Arn
