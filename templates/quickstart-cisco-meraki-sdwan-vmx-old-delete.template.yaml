---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-
  Use to test simple CFN config options.  Hello World, etc

Parameters:
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription:
      The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description:
      Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'AWS Region where the Quick Start S3 bucket (QSS3BucketName) is 
    hosted. Keep the default Region unless you are customizing the template. 
    Changing this Region updates code references to point to a new Quick Start location. 
    When using your own bucket, specify the Region. 
    See https://aws-quickstart.github.io/option1.html.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription:
      The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/). The prefix should
      end with a forward slash (/).
    Default: quickstart-cisco-meraki-sd-wan-vmx/
    Description:
      S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with 
      a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String


Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:

  
  DSMWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    # DependsOn: 
    Properties:
      Handle: !Ref DSMWaitHandle
      Timeout: 300
      Count: 1
  
  DSMWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  DSMCustomResource:
    Type: Custom::CloudWanLambda
    DependsOn: 
      - CloudWanDeleteStepFunction
    Properties:
      ServiceToken: !GetAtt DSMCustomResourceLambda.Arn
      WaitHandle: !Ref DSMWaitHandle
      #add !Ref globalnetworkname


  DSMCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda for DSMCustomResource
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt DSMCustomResourceLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub | 
          import boto3
          import json
          import cfnresponse
          from botocore.vendored import requests
          sfn = boto3.client('stepfunctions')

          def handler(event, context):
            print('Received event: %s' % json.dumps(event))
            status = cfnresponse.SUCCESS
            responseData = {}
            try:
              if event['RequestType'] == 'Create':
                print('Nothing to do') 
              if event['RequestType'] == 'Delete':
                response = sfn.start_execution(
                  stateMachineArn='${CloudWanDeleteStepFunction}',
                  input=json.dumps(event)
                )
                responseData = {'executionArn': response['executionArn']}                    
              else:
                print('Nothing to do')                  
            except Exception as e:
              print(e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, responseData)
  
  DSMCustomResourceLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: "*"
              Resource: "*"

  CloudWanDeleteStepFunction:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: 
    - CallbackLambda
    - DeleteAttachmentsDSMFunction
    - DeleteCoreDSMFunction
    - DeleteGlobalDSMFunction
    - DescribeNetworkDSMFunction
    - GetAttachmentStatusDSMFunction
    - GetCoreStatusDSMFunction
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "A description of my state machine",
          "StartAt": "Describe Network",
          "States": {
            "Describe Network": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${DescribeNetworkDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Delete Attachments",
              "ResultPath": "$.networkDetails"
            },
            "Delete Attachments": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${DeleteAttachmentsDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait 1 minute",
              "ResultPath": "$.attachmentsDeleteExecuted"
            },
            "Wait 1 minute": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Get Attachment Status"
            },
            "Get Attachment Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetAttachmentStatusDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Attachments Deleted?",
              "ResultPath": "$.attachmentStatus"
            },
            "Attachments Deleted?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.attachmentStatus.Payload",
                  "StringEquals": "DELETED",
                  "Next": "Delete Core Network"
                }
              ],
              "Default": "Wait 1 minute"
            },
            "Delete Core Network": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${DeleteCoreDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait 5 Minutes",
              "ResultPath": "$.coreDeleteExecuted"
            },
            "Wait 5 Minutes": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Get Core Network Status"
            },
            "Get Core Network Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetCoreStatusDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Core Network Deleted?",
              "ResultPath": "$.coreStatus"
            },
            "Core Network Deleted?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.coreStatus.Payload",
                  "StringEquals": "DELETED",
                  "Next": "Delete Global Network"
                }
              ],
              "Default": "Wait 5 Minutes"
            },
            "Delete Global Network": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${DeleteGlobalDSMFunction.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.globalDeleteExecuted",
              "Next": "CallBack Lambda"
            },
            "CallBack Lambda": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${CallbackLambda.Arn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "ResultPath": "$.callback"
            }
          }
        }


  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - "sts:AssumeRole"
  StatesExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StatesExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource: "*"
      Roles:
        - !Ref StatesExecutionRole

  CallbackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sends callback to CloudFormation to continue after Delete Step FUnction
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          from botocore.vendored import requests

          def handler(event, context):
            print('Received event: %s' % json.dumps(event))
            print(event['ResourceProperties']['WaitHandle'])
            try:
              requests_data=json.dumps(dict(Status='SUCCESS',Reason='Step Function Succeeded',UniqueId='12345',Data=event['ResourceProperties'])).encode('utf-8')
              response = requests.put(event['ResourceProperties']['WaitHandle'], data=requests_data, headers={'Content-Type':''}) 
              print (response)
            except Exception as e:
              print (e)
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt CallbackRole.Arn
      Timeout: 300

  CallbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"



  DeleteAttachmentsDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/delete_attachments_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DeleteCoreDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/delete_core_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DeleteGlobalDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/delete_global_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess


  DescribeNetworkDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/describe_network_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess

  GetAttachmentStatusDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/get_attachments_status_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess

  GetCoreStatusDSMFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        Key: !Sub "${QSS3KeyPrefix}functions/packages/get_core_status_delete_state_machine.zip"
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
      - AmazonEC2ReadOnlyAccess

Outputs:
  DSMWaitHandle:
    Description: "DSMWaithandle URL"
    Value: !Ref DSMWaitHandle