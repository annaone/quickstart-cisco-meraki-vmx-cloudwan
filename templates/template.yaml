AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This stack is creating creates a step function workflow for meraki cloudWAN.

# Metadata:
#   AWS::ServerlessRepo::Application:
#      Name: Amazon-Meraki-cloudWAN integration
#      Description: This integration demonstrates an sets up multiple workflows using AWS Step Functions, AWS Lambda, Amazon Eventbridge and Meraki Console Amazon EventBridge Integration.
#      Author: AWS Quick Start
#      LicenseUrl: LICENSE
#      ReadmeUrl: README.md
#      Labels: ['amazon', 'eventbridge', 'integration', 'solution', 'aws', 'lambda', 'step_functions', 'meraki', 'networkmanager']
#      HomePageUrl: https://aws.amazon.com/quickstart/quickstart-cisco-meraki-sdwan-vmx
#      SemanticVersion: 0.1.3
#      SourceCodeUrl: https://github.com/aws-quickstart/quickstart-cisco-meraki-sdwan-vmx
  # AWS::CloudFormation::Interface:
  #   ParameterGroups:
  #   - Label:
  #       default: Amazon EventBridge Integration Solution
  #     Parameters:
  #     - EventSourceName
  #   - Label:
  #       default: Meraki Configuration
  #     Parameters:
  #     - MerakiToken
  #   ParameterLabels:
  #     EventSourceName:
  #       default: Event Source Name
  #     MerakiAccessToken:
  #       default: Access Token

# Parameters:
#   GlobalNetworkName:
#     Description: Name of Global Network
#     Type: String

Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.8
    Timeout: 900
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      RegionList:
        default: region name
Parameters:
  RegionsList: 
    Type: CommaDelimitedList
    Default: "us-east-1"
    AllowedValues:
      - us-east-1
      - us-west-1
    Description: "list of regions"

Resources:
  MerakiEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: MerakiEventBus

  CreateGlobalNetworkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/create_global_network
      Policies:
      - AWSNetworkManagerFullAccess
  
  DescribeGlobalNetworksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/describe_global_network
      Policies:
      - AWSNetworkManagerFullAccess
  
  CreateCoreNetworkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/create_core_network
      Policies:
      - AWSNetworkManagerFullAccess
  
  DescribeCoreNetworksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/describe_core_network
      Policies:
      - AWSNetworkManagerFullAccess
  
  UpdateNetworkPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/update_network_policy
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
  ExecuteCoreNetworkChangeSetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/execute_core_network_change_set
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess

  GetNetworkPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/get_network_policy_status
      Policies:
      - AWSNetworkManagerFullAccess
      - AWSAccountManagementReadOnlyAccess
  
  CreateVpcAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/create_vpc_attachment
      Policies:
      - AWSNetworkManagerFullAccess
      - AdministratorAccess
  
  GetVpcAttachmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/state_machine_functions/get_vpc_attachment
      Policies:
      - AWSNetworkManagerFullAccess
      - AWSAccountManagementReadOnlyAccess

  CreateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: State machine to create meraki cloudwan global network
        StartAt: Create global network
        States:
          Create global network:
            Type: Task
            Resource: !GetAtt CreateGlobalNetworkFunction.Arn
            ResultPath: $.GlobalNetworkId
            Next: Wait 10 seconds for global network
          Wait 10 seconds for global network:
            Type: Wait
            Seconds: 10
            Next: Get global network status
          Get global network status:
            Type: Task
            Resource: !GetAtt DescribeGlobalNetworksFunction.Arn
            ResultPath: $.GlobalNetworkStatus
            Next: Global network completed?
          Global network completed?:
            Type: Choice
            Choices:
            - Variable: "$.GlobalNetworkStatus"
              StringEquals: AVAILABLE
              Next: Create core network
            - Variable: "$.GlobalNetworkStatus"
              StringEquals: FAILED
              Next: Failed
            Default: Wait 10 seconds for global network
          Create core network:
            Type: Task
            Resource: !GetAtt CreateCoreNetworkFunction.Arn
            ResultPath: $.CoreNetworkId
            Next: Wait 10 seconds for core network
          Wait 10 seconds for core network:
            Type: Wait
            Seconds: 10
            Next: Get core network status
          Get core network status:
            Type: Task
            Resource: !GetAtt DescribeCoreNetworksFunction.Arn
            ResultPath: $.CoreNetworkStatus
            Next: Core network completed?
          Core network completed?:
            Type: Choice
            Choices:
            - Variable: "$.CoreNetworkStatus"
              StringEquals: AVAILABLE
              Next: Update network policy
            - Variable: "$.CoreNetworkStatus"
              StringEquals: FAILED
              Next: Failed
            Default: Wait 10 seconds for core network
          Update network policy:
            Type: Task
            Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyVersionId
            Next: Wait 10 seconds for network policy
          Wait 10 seconds for network policy:
            Type: Wait
            Seconds: 10
            Next: Get policy status
          Get policy status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy ready to execute?
          Network policy ready to execute?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: READY_TO_EXECUTE
              Next: Execute core network change set
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 10 seconds for network policy
          Execute core network change set:
            Type: Task
            Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
            ResultPath: $.ChangeSetResponse
            Next: Wait 60 seconds for execute core network changeset
          Wait 60 seconds for execute core network changeset:
            Type: Wait
            Seconds: 60
            Next: Get network policy changeset status
          Get network policy changeset status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy change set executed?
          Network policy change set executed?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: EXECUTION_SUCCEEDED
              Next: Create Vpc Attachment
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 60 seconds for execute core network changeset
          Create Vpc Attachment:
            Type: Task
            Resource: !GetAtt CreateVpcAttachmentFunction.Arn
            ResultPath: $.Destinations
            Next: Wait 60 seconds for attachment creation
          Wait 60 seconds for attachment creation:
            Type: Wait
            Seconds: 60
            Next: Get vpc attachment status 
          Get vpc attachment status:
            Type: Task
            Resource: !GetAtt GetVpcAttachmentFunction.Arn
            ResultPath: $.VpcAttachmentState
            Next: Ready to update network policy?
          Ready to update network policy?:
            Type: Choice
            Choices:
            - Variable: "$.VpcAttachmentState"
              StringEquals: AVAILABLE
              Next: Update network policy with attachment
            - Variable: "$.VpcAttachmentState"
              StringEquals: FAILED
              Next: Failed
            Default: Wait 60 seconds for attachment creation
          Update network policy with attachment:
            Type: Task
            Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
            Parameters:
              Destinations.$: "$.Destinations"
              CoreNetworkId.$: "$.CoreNetworkId"
            ResultPath: $.NetworkPolicyVersionId
            Next: Wait 10 seconds for attachment network policy
          Wait 10 seconds for attachment network policy:
            Type: Wait
            Seconds: 10
            Next: Get attachment network policy status
          Get attachment network policy status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Attachment Network policy ready?
          Attachment Network policy ready?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: READY_TO_EXECUTE
              Next: Execute core network changeset with attachment
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 10 seconds for attachment network policy
          Execute core network changeset with attachment:
            Type: Task
            Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
            ResultPath: $.ChangeSetResponse
            Next: Wait 60 seconds for execute core network changeset with attachment
          Wait 60 seconds for execute core network changeset with attachment:
            Type: Wait
            Seconds: 60
            Next: Get attachment network policy changeset status
          Get attachment network policy changeset status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Attachment network policy change set ready to execute?
          Attachment network policy change set ready to execute?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: EXECUTION_SUCCEEDED
              Next: Done
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 60 seconds for execute core network changeset with attachment
          Done:
            Type: Pass
            End: true
          Failed:
            Type: Pass
            End: true
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateGlobalNetworkFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DescribeGlobalNetworksFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateCoreNetworkFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref DescribeCoreNetworksFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref UpdateNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref ExecuteCoreNetworkChangeSetFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref CreateVpcAttachmentFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetVpcAttachmentFunction
      
      Events:
        CreateNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - New meraki global network requested
              account:
                - !Ref AWS::AccountId
                
  UpdateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: State machine to update meraki cloudwan global network
        StartAt: Update network policy
        States:
          Update network policy:
            Type: Task
            Resource: !GetAtt UpdateNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyVersionId
            Next: Wait 10 seconds for network policy
          Wait 10 seconds for network policy:
            Type: Wait
            Seconds: 10
            Next: Get policy status
          Get policy status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy ready to execute?
          Network policy ready to execute?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: READY_TO_EXECUTE
              Next: Execute core network change set
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 10 seconds for network policy
          Execute core network change set:
            Type: Task
            Resource: !GetAtt ExecuteCoreNetworkChangeSetFunction.Arn
            ResultPath: $.ChangeSetResponse
            Next: Wait 60 seconds for execute core network changeset
          Wait 60 seconds for execute core network changeset:
            Type: Wait
            Seconds: 60
            Next: Get network policy changeset status
          Get network policy changeset status:
            Type: Task
            Resource: !GetAtt GetNetworkPolicyFunction.Arn
            ResultPath: $.NetworkPolicyChangeSetState
            Next: Network policy change set executed?
          Network policy change set executed?:
            Type: Choice
            Choices:
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: EXECUTION_SUCCEEDED
              Next: Done
            - Variable: "$.NetworkPolicyChangeSetState"
              StringEquals: FAILED_GENERATION
              Next: Failed
            Default: Wait 60 seconds for execute core network changeset
          Done:
            Type: Pass
            End: true
          Failed:
            Type: Pass
            End: true
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref UpdateNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref GetNetworkPolicyFunction
      - LambdaInvokePolicy:
          FunctionName: !Ref ExecuteCoreNetworkChangeSetFunction
      Events:
        UpdateNetworkRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref MerakiEventBus
            InputPath: $.detail
            Pattern:
              source:
                - com.aws.merakicloudwanquickstart
              detail-type:
                - update global network requested
              account:
                - !Ref AWS::AccountId

Outputs:
  CreateStateMachine:
    Value: !Ref CreateStateMachine
    Description: Create network Step Function Arn
  UpdateStateMachine:
    Value: !Ref UpdateStateMachine
    Description: Update network Step Function Arn
  MerakiEventBusArn:
    Description: The ARN of the central event bus
    Value: !GetAtt MerakiEventBus.Arn
